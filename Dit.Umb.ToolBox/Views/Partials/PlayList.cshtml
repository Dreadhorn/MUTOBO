@using Dit.Umb.MKulturProzent.Classics.Common.Extensions
@using Dit.Umb.MKulturProzent.Classics.Models.Constants
@using Dit.Umb.MKulturProzent.Classics.Models.Interpreters
@using Dit.Umb.MKulturProzent.Classics.Models.Poco
@using Dit.Umb.ToolBox.Common.Extensions
@using Umbraco.Web.Composing
@model IEnumerable<Dit.Umb.MKulturProzent.Classics.Models.Pages.ConcertPage>


@if (!Model.Any())
{
    <p>
        @Current.UmbracoHelper.GetDictionaryValue(DictionaryKeys.PlayListComponent.NoConcert)
    </p>

}

<o-playlist namespace="concerts-playlist-" border-top-first-child="true">

    @foreach (var concert in Model.Select((concert, index) => new { concert, index }))
    {
        <m-playlist-item namespace="playlist-item-" href="@($"{concert.concert.Content.Url().TrimEnd('/')}")">
            <h4>
                @Html.GetDateTimeStringForPlayList(concert.concert)
            </h4>
            @if (!concert.concert.HideSpecialMessage && !string.IsNullOrEmpty(concert.concert.SpecialMessage))
            {
                <p>
                    @concert.concert.SpecialMessage
                </p>
            }



            <h4>
                <a href="@($"{concert.concert.Content.Url().TrimEnd('/')}")">
                    @(concert?.concert?.Orchestra?.InterpreterName?.ToUpper() ?? string.Empty)
                </a>
            </h4>


            @if (!concert.concert.HideCustomStamp && !string.IsNullOrEmpty(concert.concert.CustomStamp))
            {

                @Html.Partial("Stamp", new StampModel()
           {
               Modal = concert.concert.ModalStamp,
               Label = concert.concert.CustomStamp
           })
            }
            else if (concert.concert.Canceled)
            {

                @Html.Partial("Stamp",
                    new StampModel()
                    {
                        Modal = concert.concert.ModalStamp,
                        Label = Current.UmbracoHelper.GetDictionaryValue(DictionaryKeys.PlayListComponent.Canceled)
                    })
            }
            else if (concert.concert.PostponementDate != null)
            {
                @Html.Partial("Stamp", new StampModel()
                {
                    Modal = concert.concert.ModalStamp,
                    Label = $"{Current.UmbracoHelper.GetDictionaryValue(DictionaryKeys.PlayListComponent.Delayed).TrimEnd()} {concert.concert.PostponementDate.Value.SingleDateWithStarsString()}"
                })
            }


            <p>
                @Html.GetCitiesForPlaylist(concert.concert)
            </p>

            @if (concert?.concert?.Artists != null && concert.concert.Artists.Any())
            {
                <p>
                    @foreach (var artist in concert?.concert?.Artists.Where(a => a.Content.ContentType.Alias == DocumentTypes.Conductor.Alias).Select((artist, index) => new { artist, index }))
                    {
                        @($"{artist?.artist?.InterpreterName} ({artist?.artist?.Role})")

                        if (artist?.index < concert?.concert?.Artists.Count() - 1)
                        {
                            <br />
                        }
                    }
                </p>

                <p>
                    @foreach (var artist in concert?.concert?.Artists.Where(a => a.Content.ContentType.Alias == DocumentTypes.Soloist.Alias).Select((artist, index) => new { artist, index }))
                    {
                        @($"{artist?.artist?.InterpreterName} ({artist?.artist?.Role})")

                        if (artist?.index < concert?.concert?.Artists.Count() - 1)
                        {
                            <br />
                        }
                    }
                </p>
            }




        </m-playlist-item>
    }

</o-playlist>




